// Code generated by protoc-gen-go. DO NOT EDIT.
// source: general.proto

package userBalance

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// producer 所有的 kafka topic
type KafkaTopic int32

const (
	// 保留字段
	KafkaTopic_KafkaTopicNone KafkaTopic = 0
	// 增加持币
	KafkaTopic_IncreaseHoldings       KafkaTopic = 1
	KafkaTopic_IncreaseHoldingsResult KafkaTopic = 2
	// 减少持币
	KafkaTopic_DecreaseHoldings       KafkaTopic = 3
	KafkaTopic_DecreaseHoldingsResult KafkaTopic = 4
	// 移动持币
	KafkaTopic_MoveHoldings       KafkaTopic = 5
	KafkaTopic_MoveHoldingsResult KafkaTopic = 6
	// 变化持币
	KafkaTopic_MultiChangeHoldings       KafkaTopic = 7
	KafkaTopic_MultiChangeHoldingsResult KafkaTopic = 8
	// 管理后台减少持币
	// 允许扣除为负数
	KafkaTopic_DecreaseHoldingsAdmin       KafkaTopic = 9
	KafkaTopic_DecreaseHoldingsAdminResult KafkaTopic = 10
)

var KafkaTopic_name = map[int32]string{
	0:  "KafkaTopicNone",
	1:  "IncreaseHoldings",
	2:  "IncreaseHoldingsResult",
	3:  "DecreaseHoldings",
	4:  "DecreaseHoldingsResult",
	5:  "MoveHoldings",
	6:  "MoveHoldingsResult",
	7:  "MultiChangeHoldings",
	8:  "MultiChangeHoldingsResult",
	9:  "DecreaseHoldingsAdmin",
	10: "DecreaseHoldingsAdminResult",
}

var KafkaTopic_value = map[string]int32{
	"KafkaTopicNone":              0,
	"IncreaseHoldings":            1,
	"IncreaseHoldingsResult":      2,
	"DecreaseHoldings":            3,
	"DecreaseHoldingsResult":      4,
	"MoveHoldings":                5,
	"MoveHoldingsResult":          6,
	"MultiChangeHoldings":         7,
	"MultiChangeHoldingsResult":   8,
	"DecreaseHoldingsAdmin":       9,
	"DecreaseHoldingsAdminResult": 10,
}

func (x KafkaTopic) String() string {
	return proto.EnumName(KafkaTopic_name, int32(x))
}

func (KafkaTopic) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{0}
}

// 持币类型
type HoldingsType int32

const (
	// 保留字段
	HoldingsType_HoldingsTypeNone HoldingsType = 0
	// 立即可用资产
	// 可用来交易的现货资产
	HoldingsType_SpotFree HoldingsType = 1
	// 挂单锁仓数量
	HoldingsType_SpotOrderFrozen HoldingsType = 2
	// 理财锁仓
	HoldingsType_SpotFinanceFrozen HoldingsType = 3
	// otc广告冻结
	HoldingsType_OTCFrozen HoldingsType = 4
)

var HoldingsType_name = map[int32]string{
	0: "HoldingsTypeNone",
	1: "SpotFree",
	2: "SpotOrderFrozen",
	3: "SpotFinanceFrozen",
	4: "OTCFrozen",
}

var HoldingsType_value = map[string]int32{
	"HoldingsTypeNone":  0,
	"SpotFree":          1,
	"SpotOrderFrozen":   2,
	"SpotFinanceFrozen": 3,
	"OTCFrozen":         4,
}

func (x HoldingsType) String() string {
	return proto.EnumName(HoldingsType_name, int32(x))
}

func (HoldingsType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{1}
}

type Callback_Type int32

const (
	Callback_None  Callback_Type = 0
	Callback_Http  Callback_Type = 1
	Callback_Kafka Callback_Type = 2
)

var Callback_Type_name = map[int32]string{
	0: "None",
	1: "Http",
	2: "Kafka",
}

var Callback_Type_value = map[string]int32{
	"None":  0,
	"Http":  1,
	"Kafka": 2,
}

func (x Callback_Type) String() string {
	return proto.EnumName(Callback_Type_name, int32(x))
}

func (Callback_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{3, 0}
}

type AexBusiness_Type int32

const (
	// 默认
	AexBusiness_OPERATE_TYPE_ID AexBusiness_Type = 0
	// 提币订单
	AexBusiness_OPERATE_TYPE_ID_DRAW_BALANCE AexBusiness_Type = 100001
	// 充值订单
	AexBusiness_OPERATE_TYPE_ID_DEPOSIT_BALANCE AexBusiness_Type = 100002
	// BitcnY轉移資金
	AexBusiness_OPERATE_TYPE_ID_AEXCNY_BTCCNY AexBusiness_Type = 100003
	// 发红包
	AexBusiness_OPERATE_TYPE_ID_SEND_PACK AexBusiness_Type = 200004
	// 抢红包
	AexBusiness_OPERATE_TYPE_ID_GRAD_RED_PACK AexBusiness_Type = 200005
	// 活动 - 金蛋獎勵
	AexBusiness_OPERATE_TYPE_ID_ACT_PRIZE_DROP AexBusiness_Type = 200006
	// 领利息
	AexBusiness_OPERATE_TYPE_ID_INTEREST AexBusiness_Type = 200022
	// 社区 - 打赏
	AexBusiness_OPERATE_TYPE_ID_SNS_ADMIRE AexBusiness_Type = 200023
	// 社区 - 收到打赏
	AexBusiness_OPERATE_TYPE_ID_SNS_GET_ADMIRE AexBusiness_Type = 200024
	// 保险 - 买综合安全计划
	AexBusiness_OPERATE_TYPE_ID_INSURANCE_BUY_INTEGRATED AexBusiness_Type = 200026
	// 保险 - 买特定安全计划
	AexBusiness_OPERATE_TYPE_ID_INSURANCE_BUY_DESIGNATED AexBusiness_Type = 200027
	// 保险 - 退综合安全计划
	AexBusiness_OPERATE_TYPE_ID_INSURANCE_RETURN_INTEGRATED AexBusiness_Type = 200028
	// 保险 - 退特定安全计划
	AexBusiness_OPERATE_TYPE_ID_INSURANCE_RETURN_DESIGNATED AexBusiness_Type = 200029
	// 保险 - 升级计划
	AexBusiness_OPERATE_TYPE_ID_INSURANCE_UPGRADE AexBusiness_Type = 200030
	// 合伙人返佣GAT
	AexBusiness_OPERATE_TYPE_ID_PARTNER_REBATE AexBusiness_Type = 200031
	// ILO项目瓜分
	AexBusiness_OPERATE_TYPE_ID_ILO AexBusiness_Type = 200032
	// 糖果池-锦鲤抽奖
	AexBusiness_OPERATE_TYPE_ID_CANDY_POOL_LUCKY AexBusiness_Type = 200040
	// 糖果池-领利息
	AexBusiness_OPERATE_TYPE_ID_CANDY_POOL_INTEREST AexBusiness_Type = 200041
	// 领分红
	AexBusiness_OPERATE_TYPE_ID_DIVIDEND AexBusiness_Type = 200048
	// 老时代召回
	AexBusiness_OPERATE_TYPE_ID_RECALL_OLD_USERS AexBusiness_Type = 200056
	// 慈善拍卖 - 资金扣除
	AexBusiness_OPERATE_TYPE_ID_ACTIVITY_AUCTION_BAL_DEDUCT AexBusiness_Type = 200057
	// GAT认购
	AexBusiness_OPERATE_TYPE_ID_ACTIVITY_GAT_SUBSCRIBE AexBusiness_Type = 200058
	// ILO项目解锁
	AexBusiness_OPERATE_TYPE_ID_ILO_UNLOCK AexBusiness_Type = 200059
	// 元旦现货活动 - 投注下单
	AexBusiness_OPERATE_TYPE_ID_YD_TASK_BET AexBusiness_Type = 200074
	// 元旦金融活动 - 抽奖发放
	AexBusiness_OPERATE_TYPE_ID_YD_PRIZE_DRAW AexBusiness_Type = 200075
	// 元旦现货活动 - 抽奖码中奖
	AexBusiness_OPERATE_TYPE_ID_YD_LOTTERY_CODE_DRAW AexBusiness_Type = 200076
	// 元旦合約活动 - 排名奖励
	AexBusiness_OPERATE_TYPE_ID_YD_CONTRACT_RANK_REWARD AexBusiness_Type = 200077
	// 新手礼包
	AexBusiness_OPERATE_TYPE_ID_NEW_USER_GIFT AexBusiness_Type = 210034
	// 社区 - 活力中奖
	AexBusiness_OPERATE_TYPE_ID_WINNING_THE_PRIZE AexBusiness_Type = 220033
	// 社区 - 超新星奖励
	AexBusiness_OPERATE_TYPE_ID_SNS_SUPER_START AexBusiness_Type = 220035
	// 社区 - 超新星优质内容奖励
	AexBusiness_OPERATE_TYPE_ID_SNS_SUPER_START_CONTENT AexBusiness_Type = 220036
	// 社区 - 热评榜奖励
	AexBusiness_OPERATE_TYPE_ID_SNS_HOT_COMMENT AexBusiness_Type = 220037
	// 社区 - 热评榜优质内容奖励
	AexBusiness_OPERATE_TYPE_ID_SNS_HOT_COMMENT_CONTENT AexBusiness_Type = 220038
	// 活期宝回款
	AexBusiness_OPERATE_TYPE_ID_STAKING AexBusiness_Type = 311049
	// 活期宝转入
	AexBusiness_OPERATE_TYPE_ID_STAKING_INVESTMENT AexBusiness_Type = 311051
	// 理财超市 - 定期宝回款
	AexBusiness_OPERATE_TYPE_ID_FINANCIAL AexBusiness_Type = 313021
	// DEFI - 机枪池购买（下单）
	AexBusiness_OPERATE_TYPE_ID_DEFI_ORE_POOL_CREATE_ORDER AexBusiness_Type = 313060
	// DEFI - 机枪池本金回款
	AexBusiness_OPERATE_TYPE_ID_DEFI_ORE_POOL_REPAY_MONEY AexBusiness_Type = 313061
	// DEFI - 机枪池利息回款
	AexBusiness_OPERATE_TYPE_ID_DEFI_ORE_POOL_REPAY_INTEREST AexBusiness_Type = 313062
	// DEFI - 机枪池保险金
	AexBusiness_OPERATE_TYPE_ID_DEFI_ORE_POOL_FEE_INSURANCE AexBusiness_Type = 313063
	// DEFI - 流动性矿池锁仓（下单）
	AexBusiness_OPERATE_TYPE_ID_DEFI_ORE_FLOW_CREATE_ORDER AexBusiness_Type = 313064
	// DEFI - 流动性矿池本金回款
	AexBusiness_OPERATE_TYPE_ID_DEFI_ORE_FLOW_REPAY_MONEY AexBusiness_Type = 313065
	// DEFI - 流动性矿池利息回款
	AexBusiness_OPERATE_TYPE_ID_DEFI_ORE_FLOW_REPAY_INTEREST AexBusiness_Type = 313066
	// DEFI - 流动性矿池保险金
	AexBusiness_OPERATE_TYPE_ID_DEFI_ORE_FLOW_FEE_INSURANCE AexBusiness_Type = 313067
	// 抵押借币 - 借币
	AexBusiness_OPERATE_TYPE_ID_BORROW AexBusiness_Type = 320009
	// 抵押借币 - 抵押
	AexBusiness_OPERATE_TYPE_ID_BORROW_MORT AexBusiness_Type = 320010
	// 抵押借币 - 赎回
	AexBusiness_OPERATE_TYPE_ID_BORROW_REDEEM AexBusiness_Type = 320011
	// 抵押借币 - 还币（本息）
	AexBusiness_OPERATE_TYPE_ID_BORROW_BACK AexBusiness_Type = 320012
	// 抵押借币 - 添加抵押资产C
	AexBusiness_OPERATE_TYPE_ID_BORROW_ADD_MORT AexBusiness_Type = 320013
	// 抵押借币 - 已平仓还回
	AexBusiness_OPERATE_TYPE_ID_BORROW_CLOSE_BACK AexBusiness_Type = 320014
	// 抵押借币 - 平仓剩余
	AexBusiness_OPERATE_TYPE_ID_BORROW_CLOSE_SURPLUS AexBusiness_Type = 320015
	// 抵押借币 - 借出，资金池
	AexBusiness_OPERATE_TYPE_ID_BORROW_POOL_BORROW AexBusiness_Type = 320016
	// 抵押借币 - 收到抵押,资金池
	AexBusiness_OPERATE_TYPE_ID_BORROW_POOL_MORT AexBusiness_Type = 320017
	// 抵押借币 - 还出，资金池
	AexBusiness_OPERATE_TYPE_ID_BORROW_POOL_BACK AexBusiness_Type = 320018
	// 抵押借币 - 收到还币本息，资金池
	AexBusiness_OPERATE_TYPE_ID_BORROW_POOL_BACK2 AexBusiness_Type = 320019
	// 抵押借币 - 收到增加保证金,资金池
	AexBusiness_OPERATE_TYPE_ID_BORROW_POOL_ADD_MORT AexBusiness_Type = 320020
	// 抵押借币 - 抽取部分资金
	AexBusiness_OPERATE_TYPE_ID_BORROW_EXTRACT AexBusiness_Type = 320055
	// 抵押借币 - 还利息（专业版按月还）
	AexBusiness_OPERATE_TYPE_ID_BORROW_PLAN_BACK AexBusiness_Type = 322078
	// 抵押借币 - 还本息（专业版提前还）
	AexBusiness_OPERATE_TYPE_ID_BORROW_PREPAYMENT_BACK AexBusiness_Type = 322079
	// 算力商城 - 算力收益
	AexBusiness_OPERATE_TYPE_ID_MINING_EARNINGS AexBusiness_Type = 331039
	// 算力商城 - 算力购买
	AexBusiness_OPERATE_TYPE_ID_MINING_BUY AexBusiness_Type = 331045
	// 撮合交易业务
	// NOTE: 撮合交易调用资产中心接口时，传入该业务类型，而不是不传业务类型。资产中心会强制针对该业务类型不写财务记录。
	AexBusiness_OPERATE_TYPE_ID_FLAG_TRADE AexBusiness_Type = 400001
	// 交易套餐购买日志包月
	AexBusiness_OPERATE_TYPE_ID_SETMEAL_MONTH AexBusiness_Type = 400043
	// 交易套餐购买日志包年
	AexBusiness_OPERATE_TYPE_ID_SETMEAL_YEAR AexBusiness_Type = 400044
	// AEXswap - 提供流动性
	AexBusiness_OPERATE_TYPE_ID_SWAP_ADD_MARKET AexBusiness_Type = 420068
	// AEXswap - 退出流动性
	AexBusiness_OPERATE_TYPE_ID_SWAP_REMOVE_MARKET AexBusiness_Type = 420069
	// AEXswap - 挖矿收益
	AexBusiness_OPERATE_TYPE_ID_SWAP_MINE_PROFIT AexBusiness_Type = 420070
	// swap置换
	AexBusiness_OPERATE_TYPE_SWAP_EXCHANGE AexBusiness_Type = 420071
	// ETH2
	AexBusiness_OPERATE_TYPE_SWAP_ETH2 AexBusiness_Type = 420072
	// FIL12A置换
	AexBusiness_OPERATE_TYPE_SWAP_FIL12A AexBusiness_Type = 420073
	// 合约内部划转
	// NOTE: 合约内部划转 不记财务记录
	AexBusiness_OPERATE_TYPE_ID_FLAG_CONTRACT AexBusiness_Type = 431001
	// 小资产兑换
	AexBusiness_OPERATE_TYPE_ID_SMALL_BALANCE_EXCHANGE AexBusiness_Type = 440025
	// 币种翻新
	AexBusiness_OPERATE_TYPE_ID_TRANSFER AexBusiness_Type = 442050
	// 从C2C转入
	AexBusiness_OPERATE_TYPE_ID_TRANSFORM_FROM_C2C AexBusiness_Type = 450007
	// 转出到C2C
	AexBusiness_OPERATE_TYPE_ID_TRANSFORM_TO_C2C AexBusiness_Type = 450008
	// OTC - 入账
	AexBusiness_OPERATE_TYPE_ID_OTC_ENTER AexBusiness_Type = 450052
	// OTC - 放币
	AexBusiness_OPERATE_TYPE_ID_OTC_OUT AexBusiness_Type = 450053
	// OTC - 挂单冻结划转
	AexBusiness_OPERATE_TYPE_ID_LOCK_OTC_TRANSFE AexBusiness_Type = 450054
	// 管理后台批量入账-交易活动
	AexBusiness_OPERATE_TYPE_ID_TRADE_ACTIVITY_BATCH_ENTRY AexBusiness_Type = 900042
	// 管理后台 - 空投
	AexBusiness_OPERATE_TYPE_ID_AIR_DROP AexBusiness_Type = 900046
	// 管理后台 - 补发
	AexBusiness_OPERATE_TYPE_ID_REPLENISHMENT AexBusiness_Type = 900047
)

var AexBusiness_Type_name = map[int32]string{
	0:      "OPERATE_TYPE_ID",
	100001: "OPERATE_TYPE_ID_DRAW_BALANCE",
	100002: "OPERATE_TYPE_ID_DEPOSIT_BALANCE",
	100003: "OPERATE_TYPE_ID_AEXCNY_BTCCNY",
	200004: "OPERATE_TYPE_ID_SEND_PACK",
	200005: "OPERATE_TYPE_ID_GRAD_RED_PACK",
	200006: "OPERATE_TYPE_ID_ACT_PRIZE_DROP",
	200022: "OPERATE_TYPE_ID_INTEREST",
	200023: "OPERATE_TYPE_ID_SNS_ADMIRE",
	200024: "OPERATE_TYPE_ID_SNS_GET_ADMIRE",
	200026: "OPERATE_TYPE_ID_INSURANCE_BUY_INTEGRATED",
	200027: "OPERATE_TYPE_ID_INSURANCE_BUY_DESIGNATED",
	200028: "OPERATE_TYPE_ID_INSURANCE_RETURN_INTEGRATED",
	200029: "OPERATE_TYPE_ID_INSURANCE_RETURN_DESIGNATED",
	200030: "OPERATE_TYPE_ID_INSURANCE_UPGRADE",
	200031: "OPERATE_TYPE_ID_PARTNER_REBATE",
	200032: "OPERATE_TYPE_ID_ILO",
	200040: "OPERATE_TYPE_ID_CANDY_POOL_LUCKY",
	200041: "OPERATE_TYPE_ID_CANDY_POOL_INTEREST",
	200048: "OPERATE_TYPE_ID_DIVIDEND",
	200056: "OPERATE_TYPE_ID_RECALL_OLD_USERS",
	200057: "OPERATE_TYPE_ID_ACTIVITY_AUCTION_BAL_DEDUCT",
	200058: "OPERATE_TYPE_ID_ACTIVITY_GAT_SUBSCRIBE",
	200059: "OPERATE_TYPE_ID_ILO_UNLOCK",
	200074: "OPERATE_TYPE_ID_YD_TASK_BET",
	200075: "OPERATE_TYPE_ID_YD_PRIZE_DRAW",
	200076: "OPERATE_TYPE_ID_YD_LOTTERY_CODE_DRAW",
	200077: "OPERATE_TYPE_ID_YD_CONTRACT_RANK_REWARD",
	210034: "OPERATE_TYPE_ID_NEW_USER_GIFT",
	220033: "OPERATE_TYPE_ID_WINNING_THE_PRIZE",
	220035: "OPERATE_TYPE_ID_SNS_SUPER_START",
	220036: "OPERATE_TYPE_ID_SNS_SUPER_START_CONTENT",
	220037: "OPERATE_TYPE_ID_SNS_HOT_COMMENT",
	220038: "OPERATE_TYPE_ID_SNS_HOT_COMMENT_CONTENT",
	311049: "OPERATE_TYPE_ID_STAKING",
	311051: "OPERATE_TYPE_ID_STAKING_INVESTMENT",
	313021: "OPERATE_TYPE_ID_FINANCIAL",
	313060: "OPERATE_TYPE_ID_DEFI_ORE_POOL_CREATE_ORDER",
	313061: "OPERATE_TYPE_ID_DEFI_ORE_POOL_REPAY_MONEY",
	313062: "OPERATE_TYPE_ID_DEFI_ORE_POOL_REPAY_INTEREST",
	313063: "OPERATE_TYPE_ID_DEFI_ORE_POOL_FEE_INSURANCE",
	313064: "OPERATE_TYPE_ID_DEFI_ORE_FLOW_CREATE_ORDER",
	313065: "OPERATE_TYPE_ID_DEFI_ORE_FLOW_REPAY_MONEY",
	313066: "OPERATE_TYPE_ID_DEFI_ORE_FLOW_REPAY_INTEREST",
	313067: "OPERATE_TYPE_ID_DEFI_ORE_FLOW_FEE_INSURANCE",
	320009: "OPERATE_TYPE_ID_BORROW",
	320010: "OPERATE_TYPE_ID_BORROW_MORT",
	320011: "OPERATE_TYPE_ID_BORROW_REDEEM",
	320012: "OPERATE_TYPE_ID_BORROW_BACK",
	320013: "OPERATE_TYPE_ID_BORROW_ADD_MORT",
	320014: "OPERATE_TYPE_ID_BORROW_CLOSE_BACK",
	320015: "OPERATE_TYPE_ID_BORROW_CLOSE_SURPLUS",
	320016: "OPERATE_TYPE_ID_BORROW_POOL_BORROW",
	320017: "OPERATE_TYPE_ID_BORROW_POOL_MORT",
	320018: "OPERATE_TYPE_ID_BORROW_POOL_BACK",
	320019: "OPERATE_TYPE_ID_BORROW_POOL_BACK2",
	320020: "OPERATE_TYPE_ID_BORROW_POOL_ADD_MORT",
	320055: "OPERATE_TYPE_ID_BORROW_EXTRACT",
	322078: "OPERATE_TYPE_ID_BORROW_PLAN_BACK",
	322079: "OPERATE_TYPE_ID_BORROW_PREPAYMENT_BACK",
	331039: "OPERATE_TYPE_ID_MINING_EARNINGS",
	331045: "OPERATE_TYPE_ID_MINING_BUY",
	400001: "OPERATE_TYPE_ID_FLAG_TRADE",
	400043: "OPERATE_TYPE_ID_SETMEAL_MONTH",
	400044: "OPERATE_TYPE_ID_SETMEAL_YEAR",
	420068: "OPERATE_TYPE_ID_SWAP_ADD_MARKET",
	420069: "OPERATE_TYPE_ID_SWAP_REMOVE_MARKET",
	420070: "OPERATE_TYPE_ID_SWAP_MINE_PROFIT",
	420071: "OPERATE_TYPE_SWAP_EXCHANGE",
	420072: "OPERATE_TYPE_SWAP_ETH2",
	420073: "OPERATE_TYPE_SWAP_FIL12A",
	431001: "OPERATE_TYPE_ID_FLAG_CONTRACT",
	440025: "OPERATE_TYPE_ID_SMALL_BALANCE_EXCHANGE",
	442050: "OPERATE_TYPE_ID_TRANSFER",
	450007: "OPERATE_TYPE_ID_TRANSFORM_FROM_C2C",
	450008: "OPERATE_TYPE_ID_TRANSFORM_TO_C2C",
	450052: "OPERATE_TYPE_ID_OTC_ENTER",
	450053: "OPERATE_TYPE_ID_OTC_OUT",
	450054: "OPERATE_TYPE_ID_LOCK_OTC_TRANSFE",
	900042: "OPERATE_TYPE_ID_TRADE_ACTIVITY_BATCH_ENTRY",
	900046: "OPERATE_TYPE_ID_AIR_DROP",
	900047: "OPERATE_TYPE_ID_REPLENISHMENT",
}

var AexBusiness_Type_value = map[string]int32{
	"OPERATE_TYPE_ID":                              0,
	"OPERATE_TYPE_ID_DRAW_BALANCE":                 100001,
	"OPERATE_TYPE_ID_DEPOSIT_BALANCE":              100002,
	"OPERATE_TYPE_ID_AEXCNY_BTCCNY":                100003,
	"OPERATE_TYPE_ID_SEND_PACK":                    200004,
	"OPERATE_TYPE_ID_GRAD_RED_PACK":                200005,
	"OPERATE_TYPE_ID_ACT_PRIZE_DROP":               200006,
	"OPERATE_TYPE_ID_INTEREST":                     200022,
	"OPERATE_TYPE_ID_SNS_ADMIRE":                   200023,
	"OPERATE_TYPE_ID_SNS_GET_ADMIRE":               200024,
	"OPERATE_TYPE_ID_INSURANCE_BUY_INTEGRATED":     200026,
	"OPERATE_TYPE_ID_INSURANCE_BUY_DESIGNATED":     200027,
	"OPERATE_TYPE_ID_INSURANCE_RETURN_INTEGRATED":  200028,
	"OPERATE_TYPE_ID_INSURANCE_RETURN_DESIGNATED":  200029,
	"OPERATE_TYPE_ID_INSURANCE_UPGRADE":            200030,
	"OPERATE_TYPE_ID_PARTNER_REBATE":               200031,
	"OPERATE_TYPE_ID_ILO":                          200032,
	"OPERATE_TYPE_ID_CANDY_POOL_LUCKY":             200040,
	"OPERATE_TYPE_ID_CANDY_POOL_INTEREST":          200041,
	"OPERATE_TYPE_ID_DIVIDEND":                     200048,
	"OPERATE_TYPE_ID_RECALL_OLD_USERS":             200056,
	"OPERATE_TYPE_ID_ACTIVITY_AUCTION_BAL_DEDUCT":  200057,
	"OPERATE_TYPE_ID_ACTIVITY_GAT_SUBSCRIBE":       200058,
	"OPERATE_TYPE_ID_ILO_UNLOCK":                   200059,
	"OPERATE_TYPE_ID_YD_TASK_BET":                  200074,
	"OPERATE_TYPE_ID_YD_PRIZE_DRAW":                200075,
	"OPERATE_TYPE_ID_YD_LOTTERY_CODE_DRAW":         200076,
	"OPERATE_TYPE_ID_YD_CONTRACT_RANK_REWARD":      200077,
	"OPERATE_TYPE_ID_NEW_USER_GIFT":                210034,
	"OPERATE_TYPE_ID_WINNING_THE_PRIZE":            220033,
	"OPERATE_TYPE_ID_SNS_SUPER_START":              220035,
	"OPERATE_TYPE_ID_SNS_SUPER_START_CONTENT":      220036,
	"OPERATE_TYPE_ID_SNS_HOT_COMMENT":              220037,
	"OPERATE_TYPE_ID_SNS_HOT_COMMENT_CONTENT":      220038,
	"OPERATE_TYPE_ID_STAKING":                      311049,
	"OPERATE_TYPE_ID_STAKING_INVESTMENT":           311051,
	"OPERATE_TYPE_ID_FINANCIAL":                    313021,
	"OPERATE_TYPE_ID_DEFI_ORE_POOL_CREATE_ORDER":   313060,
	"OPERATE_TYPE_ID_DEFI_ORE_POOL_REPAY_MONEY":    313061,
	"OPERATE_TYPE_ID_DEFI_ORE_POOL_REPAY_INTEREST": 313062,
	"OPERATE_TYPE_ID_DEFI_ORE_POOL_FEE_INSURANCE":  313063,
	"OPERATE_TYPE_ID_DEFI_ORE_FLOW_CREATE_ORDER":   313064,
	"OPERATE_TYPE_ID_DEFI_ORE_FLOW_REPAY_MONEY":    313065,
	"OPERATE_TYPE_ID_DEFI_ORE_FLOW_REPAY_INTEREST": 313066,
	"OPERATE_TYPE_ID_DEFI_ORE_FLOW_FEE_INSURANCE":  313067,
	"OPERATE_TYPE_ID_BORROW":                       320009,
	"OPERATE_TYPE_ID_BORROW_MORT":                  320010,
	"OPERATE_TYPE_ID_BORROW_REDEEM":                320011,
	"OPERATE_TYPE_ID_BORROW_BACK":                  320012,
	"OPERATE_TYPE_ID_BORROW_ADD_MORT":              320013,
	"OPERATE_TYPE_ID_BORROW_CLOSE_BACK":            320014,
	"OPERATE_TYPE_ID_BORROW_CLOSE_SURPLUS":         320015,
	"OPERATE_TYPE_ID_BORROW_POOL_BORROW":           320016,
	"OPERATE_TYPE_ID_BORROW_POOL_MORT":             320017,
	"OPERATE_TYPE_ID_BORROW_POOL_BACK":             320018,
	"OPERATE_TYPE_ID_BORROW_POOL_BACK2":            320019,
	"OPERATE_TYPE_ID_BORROW_POOL_ADD_MORT":         320020,
	"OPERATE_TYPE_ID_BORROW_EXTRACT":               320055,
	"OPERATE_TYPE_ID_BORROW_PLAN_BACK":             322078,
	"OPERATE_TYPE_ID_BORROW_PREPAYMENT_BACK":       322079,
	"OPERATE_TYPE_ID_MINING_EARNINGS":              331039,
	"OPERATE_TYPE_ID_MINING_BUY":                   331045,
	"OPERATE_TYPE_ID_FLAG_TRADE":                   400001,
	"OPERATE_TYPE_ID_SETMEAL_MONTH":                400043,
	"OPERATE_TYPE_ID_SETMEAL_YEAR":                 400044,
	"OPERATE_TYPE_ID_SWAP_ADD_MARKET":              420068,
	"OPERATE_TYPE_ID_SWAP_REMOVE_MARKET":           420069,
	"OPERATE_TYPE_ID_SWAP_MINE_PROFIT":             420070,
	"OPERATE_TYPE_SWAP_EXCHANGE":                   420071,
	"OPERATE_TYPE_SWAP_ETH2":                       420072,
	"OPERATE_TYPE_SWAP_FIL12A":                     420073,
	"OPERATE_TYPE_ID_FLAG_CONTRACT":                431001,
	"OPERATE_TYPE_ID_SMALL_BALANCE_EXCHANGE":       440025,
	"OPERATE_TYPE_ID_TRANSFER":                     442050,
	"OPERATE_TYPE_ID_TRANSFORM_FROM_C2C":           450007,
	"OPERATE_TYPE_ID_TRANSFORM_TO_C2C":             450008,
	"OPERATE_TYPE_ID_OTC_ENTER":                    450052,
	"OPERATE_TYPE_ID_OTC_OUT":                      450053,
	"OPERATE_TYPE_ID_LOCK_OTC_TRANSFE":             450054,
	"OPERATE_TYPE_ID_TRADE_ACTIVITY_BATCH_ENTRY":   900042,
	"OPERATE_TYPE_ID_AIR_DROP":                     900046,
	"OPERATE_TYPE_ID_REPLENISHMENT":                900047,
}

func (x AexBusiness_Type) String() string {
	return proto.EnumName(AexBusiness_Type_name, int32(x))
}

func (AexBusiness_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{5, 0}
}

// 请求附带的 HttpCallback
type HttpCallback struct {
	// 回调ID，用以记录
	// 长度不要超过 32
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 回调地址
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// 回调方法，标准 http 请求方法
	Method string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	// 请求的 timeout: ms
	// 5000 ~ 60000
	Timeout int64 `protobuf:"varint,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// 如果回调失败，那么会尝试重试，重试次数
	// >= 0
	MaxRetries int64 `protobuf:"varint,5,opt,name=maxRetries,proto3" json:"maxRetries,omitempty"`
	// 重试回调的间隔: ms
	// 1000 ~ 600000
	RetryInterval        int64    `protobuf:"varint,6,opt,name=retryInterval,proto3" json:"retryInterval,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HttpCallback) Reset()         { *m = HttpCallback{} }
func (m *HttpCallback) String() string { return proto.CompactTextString(m) }
func (*HttpCallback) ProtoMessage()    {}
func (*HttpCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{0}
}

func (m *HttpCallback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HttpCallback.Unmarshal(m, b)
}
func (m *HttpCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HttpCallback.Marshal(b, m, deterministic)
}
func (m *HttpCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HttpCallback.Merge(m, src)
}
func (m *HttpCallback) XXX_Size() int {
	return xxx_messageInfo_HttpCallback.Size(m)
}
func (m *HttpCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_HttpCallback.DiscardUnknown(m)
}

var xxx_messageInfo_HttpCallback proto.InternalMessageInfo

func (m *HttpCallback) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *HttpCallback) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *HttpCallback) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *HttpCallback) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *HttpCallback) GetMaxRetries() int64 {
	if m != nil {
		return m.MaxRetries
	}
	return 0
}

func (m *HttpCallback) GetRetryInterval() int64 {
	if m != nil {
		return m.RetryInterval
	}
	return 0
}

type KafkaCallback struct {
	// 回调ID，用以记录
	// 长度不要超过 32
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// 往此 topic 中发送一条消息
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// 往此 partition 中发送消息
	// -1 代表随机分配
	Partition            int64    `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KafkaCallback) Reset()         { *m = KafkaCallback{} }
func (m *KafkaCallback) String() string { return proto.CompactTextString(m) }
func (*KafkaCallback) ProtoMessage()    {}
func (*KafkaCallback) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{1}
}

func (m *KafkaCallback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KafkaCallback.Unmarshal(m, b)
}
func (m *KafkaCallback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KafkaCallback.Marshal(b, m, deterministic)
}
func (m *KafkaCallback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaCallback.Merge(m, src)
}
func (m *KafkaCallback) XXX_Size() int {
	return xxx_messageInfo_KafkaCallback.Size(m)
}
func (m *KafkaCallback) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaCallback.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaCallback proto.InternalMessageInfo

func (m *KafkaCallback) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *KafkaCallback) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *KafkaCallback) GetPartition() int64 {
	if m != nil {
		return m.Partition
	}
	return 0
}

// 在 kafka callback 时，发送的消息体
type KafkaCallbackMessage struct {
	// 回调ID
	CallbackID string `protobuf:"bytes,1,opt,name=callbackID,proto3" json:"callbackID,omitempty"`
	// 请求ID
	RequestID            string   `protobuf:"bytes,2,opt,name=requestID,proto3" json:"requestID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KafkaCallbackMessage) Reset()         { *m = KafkaCallbackMessage{} }
func (m *KafkaCallbackMessage) String() string { return proto.CompactTextString(m) }
func (*KafkaCallbackMessage) ProtoMessage()    {}
func (*KafkaCallbackMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{2}
}

func (m *KafkaCallbackMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KafkaCallbackMessage.Unmarshal(m, b)
}
func (m *KafkaCallbackMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KafkaCallbackMessage.Marshal(b, m, deterministic)
}
func (m *KafkaCallbackMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KafkaCallbackMessage.Merge(m, src)
}
func (m *KafkaCallbackMessage) XXX_Size() int {
	return xxx_messageInfo_KafkaCallbackMessage.Size(m)
}
func (m *KafkaCallbackMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_KafkaCallbackMessage.DiscardUnknown(m)
}

var xxx_messageInfo_KafkaCallbackMessage proto.InternalMessageInfo

func (m *KafkaCallbackMessage) GetCallbackID() string {
	if m != nil {
		return m.CallbackID
	}
	return ""
}

func (m *KafkaCallbackMessage) GetRequestID() string {
	if m != nil {
		return m.RequestID
	}
	return ""
}

type Callback struct {
	// 回调类型
	Type Callback_Type `protobuf:"varint,1,opt,name=type,proto3,enum=userBalance.Callback_Type" json:"type,omitempty"`
	// 根据回调类型传入回调参数
	Http                 *HttpCallback  `protobuf:"bytes,2,opt,name=http,proto3" json:"http,omitempty"`
	Kafka                *KafkaCallback `protobuf:"bytes,3,opt,name=kafka,proto3" json:"kafka,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Callback) Reset()         { *m = Callback{} }
func (m *Callback) String() string { return proto.CompactTextString(m) }
func (*Callback) ProtoMessage()    {}
func (*Callback) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{3}
}

func (m *Callback) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Callback.Unmarshal(m, b)
}
func (m *Callback) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Callback.Marshal(b, m, deterministic)
}
func (m *Callback) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Callback.Merge(m, src)
}
func (m *Callback) XXX_Size() int {
	return xxx_messageInfo_Callback.Size(m)
}
func (m *Callback) XXX_DiscardUnknown() {
	xxx_messageInfo_Callback.DiscardUnknown(m)
}

var xxx_messageInfo_Callback proto.InternalMessageInfo

func (m *Callback) GetType() Callback_Type {
	if m != nil {
		return m.Type
	}
	return Callback_None
}

func (m *Callback) GetHttp() *HttpCallback {
	if m != nil {
		return m.Http
	}
	return nil
}

func (m *Callback) GetKafka() *KafkaCallback {
	if m != nil {
		return m.Kafka
	}
	return nil
}

// 持币
type CoinHoldings struct {
	// 币
	CoinCode             string                   `protobuf:"bytes,1,opt,name=coinCode,proto3" json:"coinCode,omitempty"`
	Holdings             []*CoinHoldings_Holdings `protobuf:"bytes,2,rep,name=holdings,proto3" json:"holdings,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                 `json:"-"`
	XXX_unrecognized     []byte                   `json:"-"`
	XXX_sizecache        int32                    `json:"-"`
}

func (m *CoinHoldings) Reset()         { *m = CoinHoldings{} }
func (m *CoinHoldings) String() string { return proto.CompactTextString(m) }
func (*CoinHoldings) ProtoMessage()    {}
func (*CoinHoldings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{4}
}

func (m *CoinHoldings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoinHoldings.Unmarshal(m, b)
}
func (m *CoinHoldings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoinHoldings.Marshal(b, m, deterministic)
}
func (m *CoinHoldings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinHoldings.Merge(m, src)
}
func (m *CoinHoldings) XXX_Size() int {
	return xxx_messageInfo_CoinHoldings.Size(m)
}
func (m *CoinHoldings) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinHoldings.DiscardUnknown(m)
}

var xxx_messageInfo_CoinHoldings proto.InternalMessageInfo

func (m *CoinHoldings) GetCoinCode() string {
	if m != nil {
		return m.CoinCode
	}
	return ""
}

func (m *CoinHoldings) GetHoldings() []*CoinHoldings_Holdings {
	if m != nil {
		return m.Holdings
	}
	return nil
}

type CoinHoldings_Holdings struct {
	// 持币类型
	Type HoldingsType `protobuf:"varint,2,opt,name=type,proto3,enum=userBalance.HoldingsType" json:"type,omitempty"`
	// 持币数量
	Holdings             float64  `protobuf:"fixed64,3,opt,name=holdings,proto3" json:"holdings,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CoinHoldings_Holdings) Reset()         { *m = CoinHoldings_Holdings{} }
func (m *CoinHoldings_Holdings) String() string { return proto.CompactTextString(m) }
func (*CoinHoldings_Holdings) ProtoMessage()    {}
func (*CoinHoldings_Holdings) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{4, 0}
}

func (m *CoinHoldings_Holdings) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CoinHoldings_Holdings.Unmarshal(m, b)
}
func (m *CoinHoldings_Holdings) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CoinHoldings_Holdings.Marshal(b, m, deterministic)
}
func (m *CoinHoldings_Holdings) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoinHoldings_Holdings.Merge(m, src)
}
func (m *CoinHoldings_Holdings) XXX_Size() int {
	return xxx_messageInfo_CoinHoldings_Holdings.Size(m)
}
func (m *CoinHoldings_Holdings) XXX_DiscardUnknown() {
	xxx_messageInfo_CoinHoldings_Holdings.DiscardUnknown(m)
}

var xxx_messageInfo_CoinHoldings_Holdings proto.InternalMessageInfo

func (m *CoinHoldings_Holdings) GetType() HoldingsType {
	if m != nil {
		return m.Type
	}
	return HoldingsType_HoldingsTypeNone
}

func (m *CoinHoldings_Holdings) GetHoldings() float64 {
	if m != nil {
		return m.Holdings
	}
	return 0
}

// AEX 业务
type AexBusiness struct {
	// 业务类型
	OperateType AexBusiness_Type `protobuf:"varint,1,opt,name=operateType,proto3,enum=userBalance.AexBusiness_Type" json:"operateType,omitempty"`
	// 业务类型名字
	OperateTypeName string `protobuf:"bytes,2,opt,name=operateTypeName,proto3" json:"operateTypeName,omitempty"`
	// 用户发起操作对应的 IP
	Uip string `protobuf:"bytes,3,opt,name=uip,proto3" json:"uip,omitempty"`
	// 用户发起操作的时间
	Utime int64 `protobuf:"varint,4,opt,name=utime,proto3" json:"utime,omitempty"`
	// 原因
	// 可不填
	Reason string `protobuf:"bytes,5,opt,name=reason,proto3" json:"reason,omitempty"`
	// 操作人
	// 可不填
	Nickname string `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	// 业务操作流水号
	// 一次流水号只会成功触发一次修改资金的操作
	LogID                string   `protobuf:"bytes,7,opt,name=logID,proto3" json:"logID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AexBusiness) Reset()         { *m = AexBusiness{} }
func (m *AexBusiness) String() string { return proto.CompactTextString(m) }
func (*AexBusiness) ProtoMessage()    {}
func (*AexBusiness) Descriptor() ([]byte, []int) {
	return fileDescriptor_a913b1a5d8940539, []int{5}
}

func (m *AexBusiness) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AexBusiness.Unmarshal(m, b)
}
func (m *AexBusiness) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AexBusiness.Marshal(b, m, deterministic)
}
func (m *AexBusiness) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AexBusiness.Merge(m, src)
}
func (m *AexBusiness) XXX_Size() int {
	return xxx_messageInfo_AexBusiness.Size(m)
}
func (m *AexBusiness) XXX_DiscardUnknown() {
	xxx_messageInfo_AexBusiness.DiscardUnknown(m)
}

var xxx_messageInfo_AexBusiness proto.InternalMessageInfo

func (m *AexBusiness) GetOperateType() AexBusiness_Type {
	if m != nil {
		return m.OperateType
	}
	return AexBusiness_OPERATE_TYPE_ID
}

func (m *AexBusiness) GetOperateTypeName() string {
	if m != nil {
		return m.OperateTypeName
	}
	return ""
}

func (m *AexBusiness) GetUip() string {
	if m != nil {
		return m.Uip
	}
	return ""
}

func (m *AexBusiness) GetUtime() int64 {
	if m != nil {
		return m.Utime
	}
	return 0
}

func (m *AexBusiness) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *AexBusiness) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *AexBusiness) GetLogID() string {
	if m != nil {
		return m.LogID
	}
	return ""
}

func init() {
	proto.RegisterEnum("userBalance.KafkaTopic", KafkaTopic_name, KafkaTopic_value)
	proto.RegisterEnum("userBalance.HoldingsType", HoldingsType_name, HoldingsType_value)
	proto.RegisterEnum("userBalance.Callback_Type", Callback_Type_name, Callback_Type_value)
	proto.RegisterEnum("userBalance.AexBusiness_Type", AexBusiness_Type_name, AexBusiness_Type_value)
	proto.RegisterType((*HttpCallback)(nil), "userBalance.HttpCallback")
	proto.RegisterType((*KafkaCallback)(nil), "userBalance.KafkaCallback")
	proto.RegisterType((*KafkaCallbackMessage)(nil), "userBalance.KafkaCallbackMessage")
	proto.RegisterType((*Callback)(nil), "userBalance.Callback")
	proto.RegisterType((*CoinHoldings)(nil), "userBalance.CoinHoldings")
	proto.RegisterType((*CoinHoldings_Holdings)(nil), "userBalance.CoinHoldings.Holdings")
	proto.RegisterType((*AexBusiness)(nil), "userBalance.AexBusiness")
}

func init() { proto.RegisterFile("general.proto", fileDescriptor_a913b1a5d8940539) }

var fileDescriptor_a913b1a5d8940539 = []byte{
	// 1876 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x98, 0x4b, 0x6c, 0x1b, 0xc7,
	0x19, 0x80, 0x43, 0xea, 0x61, 0x69, 0xb4, 0xb2, 0xa7, 0x43, 0xc7, 0x21, 0x29, 0x3f, 0x14, 0xc6,
	0x49, 0x14, 0x37, 0x56, 0x13, 0x15, 0xf0, 0xa5, 0x40, 0x8b, 0xe1, 0xee, 0x90, 0x5c, 0x68, 0xb9,
	0x4b, 0xcc, 0x0e, 0x2d, 0x33, 0x97, 0x01, 0x23, 0x6d, 0x65, 0xc2, 0x14, 0xc9, 0x92, 0xab, 0x20,
	0xee, 0x2d, 0x68, 0x12, 0x20, 0x71, 0xd8, 0xf7, 0xa5, 0x34, 0xd0, 0xa0, 0x29, 0x8a, 0x16, 0x68,
	0xaf, 0xae, 0x0f, 0x71, 0x0f, 0x0d, 0xd8, 0x02, 0xed, 0xa1, 0x85, 0x80, 0xa0, 0x49, 0xdf, 0x3d,
	0xe4, 0x21, 0xb7, 0x28, 0x50, 0xf4, 0xe2, 0x3e, 0x50, 0xa3, 0x98, 0xe1, 0x92, 0x5c, 0x92, 0x23,
	0xc9, 0x27, 0x71, 0xfe, 0xf9, 0xfe, 0xe7, 0xcc, 0x3f, 0xb3, 0x23, 0xb0, 0xb8, 0xed, 0xd5, 0xbc,
	0x66, 0xb9, 0xba, 0xda, 0x68, 0xd6, 0xfd, 0x3a, 0x5a, 0xd8, 0x6d, 0x79, 0xcd, 0x74, 0xb9, 0x5a,
	0xae, 0x6d, 0x7a, 0xa9, 0x1f, 0x44, 0x80, 0x96, 0xf3, 0xfd, 0x86, 0x5e, 0xae, 0x56, 0x9f, 0x2f,
	0x6f, 0x5e, 0x43, 0xc7, 0x41, 0xb4, 0xb2, 0x15, 0x8f, 0x2c, 0x47, 0x56, 0xe6, 0x69, 0xb4, 0xb2,
	0x85, 0x20, 0x98, 0xda, 0x6d, 0x56, 0xe3, 0x51, 0x29, 0x10, 0x3f, 0xd1, 0x29, 0x30, 0xbb, 0xe3,
	0xf9, 0x57, 0xeb, 0x5b, 0xf1, 0x29, 0x29, 0x0c, 0x46, 0x28, 0x0e, 0x8e, 0xf9, 0x95, 0x1d, 0xaf,
	0xbe, 0xeb, 0xc7, 0xa7, 0x97, 0x23, 0x2b, 0x53, 0xb4, 0x3f, 0x44, 0x67, 0x01, 0xd8, 0x29, 0xbf,
	0x48, 0x3d, 0xbf, 0x59, 0xf1, 0x5a, 0xf1, 0x19, 0x39, 0x19, 0x92, 0xa0, 0xf3, 0x60, 0xb1, 0xe9,
	0xf9, 0xcd, 0xeb, 0x66, 0xcd, 0xf7, 0x9a, 0x2f, 0x94, 0xab, 0xf1, 0x59, 0x89, 0x8c, 0x0a, 0x53,
	0x2e, 0x58, 0x5c, 0x2f, 0x7f, 0xfe, 0x5a, 0xf9, 0xc0, 0x50, 0x4f, 0x82, 0x19, 0xbf, 0xde, 0xa8,
	0x6c, 0x06, 0xc1, 0xf6, 0x06, 0xe8, 0x34, 0x98, 0x6f, 0x94, 0x9b, 0x7e, 0xc5, 0xaf, 0xd4, 0x6b,
	0x32, 0xe2, 0x29, 0x3a, 0x14, 0xa4, 0x18, 0x38, 0x39, 0x62, 0x34, 0xef, 0xb5, 0x5a, 0xe5, 0x6d,
	0x4f, 0x84, 0xbc, 0x19, 0x88, 0x4c, 0x23, 0xf0, 0x11, 0x92, 0x08, 0xab, 0x4d, 0xef, 0x0b, 0xbb,
	0x5e, 0xcb, 0x37, 0x8d, 0xc0, 0xdf, 0x50, 0x90, 0x7a, 0x27, 0x02, 0xe6, 0x06, 0x61, 0xae, 0x82,
	0x69, 0xff, 0x7a, 0xc3, 0x93, 0x46, 0x8e, 0xaf, 0x25, 0x57, 0x43, 0xe5, 0x5f, 0xed, 0x43, 0xab,
	0xec, 0x7a, 0xc3, 0xa3, 0x92, 0x43, 0x17, 0xc1, 0xf4, 0x55, 0xdf, 0x6f, 0x48, 0xab, 0x0b, 0x6b,
	0x89, 0x11, 0x3e, 0xbc, 0x54, 0x54, 0x62, 0xe8, 0x19, 0x30, 0x73, 0x4d, 0x64, 0x20, 0x73, 0x5b,
	0x18, 0xb3, 0x3f, 0x92, 0x1b, 0xed, 0x81, 0xa9, 0xc7, 0xc1, 0xb4, 0x70, 0x87, 0xe6, 0xc0, 0xb4,
	0x5d, 0xaf, 0x79, 0xf0, 0x21, 0xf1, 0x4b, 0x58, 0x86, 0x11, 0x34, 0x0f, 0x66, 0xa4, 0x0e, 0x8c,
	0xa6, 0x7e, 0x1a, 0x01, 0x9a, 0x5e, 0xaf, 0xd4, 0x72, 0xf5, 0xea, 0x56, 0xa5, 0xb6, 0xdd, 0x42,
	0x49, 0x30, 0xb7, 0x59, 0xaf, 0xd4, 0xf4, 0xfa, 0x96, 0x17, 0x54, 0x64, 0x30, 0x46, 0x9f, 0x05,
	0x73, 0x57, 0x03, 0x2e, 0x1e, 0x5d, 0x9e, 0x5a, 0x59, 0x58, 0x4b, 0x8d, 0x26, 0x1a, 0x32, 0xb4,
	0xda, 0xff, 0x41, 0x07, 0x3a, 0xc9, 0x22, 0x98, 0x1b, 0xf8, 0xb9, 0x18, 0x14, 0x2c, 0x2a, 0x0b,
	0x36, 0x56, 0x80, 0x00, 0x0a, 0xd5, 0x2b, 0x19, 0x72, 0x2d, 0x6a, 0x10, 0x19, 0x9a, 0x4d, 0xfd,
	0x78, 0x09, 0x2c, 0x60, 0xef, 0xc5, 0xf4, 0x6e, 0xab, 0x52, 0xf3, 0x5a, 0x2d, 0xf4, 0x39, 0xb0,
	0x50, 0x6f, 0x78, 0xcd, 0xb2, 0xef, 0xb1, 0xe1, 0x92, 0x9c, 0x19, 0xf1, 0x10, 0xc2, 0x7b, 0xab,
	0x12, 0xd6, 0x40, 0x2b, 0xe0, 0x44, 0x68, 0x68, 0x97, 0x77, 0xbc, 0x60, 0xf5, 0xc7, 0xc5, 0xb2,
	0x71, 0x2a, 0x8d, 0xa0, 0x47, 0xc4, 0x4f, 0xb1, 0x3f, 0x77, 0x45, 0x4b, 0x04, 0xed, 0xd1, 0x1b,
	0x88, 0x76, 0x6a, 0x7a, 0xe5, 0x56, 0xbd, 0x26, 0x1b, 0x63, 0x9e, 0x06, 0x23, 0x91, 0x56, 0xad,
	0xb2, 0x79, 0xad, 0x26, 0x5c, 0xcc, 0xf6, 0xaa, 0xdd, 0x1f, 0x0b, 0x4b, 0xd5, 0xfa, 0xb6, 0x69,
	0xc4, 0x8f, 0xf5, 0x76, 0xba, 0x1c, 0xa4, 0x7e, 0x91, 0x08, 0x16, 0x36, 0x06, 0x4e, 0x38, 0x05,
	0x42, 0x31, 0x23, 0x9c, 0x95, 0x0a, 0x84, 0x9b, 0x06, 0x7c, 0x08, 0xa5, 0xc0, 0xe9, 0x31, 0x21,
	0x37, 0x28, 0xde, 0xe0, 0x69, 0x6c, 0x61, 0x5b, 0x27, 0xf0, 0x3b, 0xed, 0x59, 0xf4, 0x38, 0x38,
	0x37, 0xc1, 0x90, 0x82, 0xe3, 0x9a, 0x6c, 0x80, 0xbd, 0xd5, 0x9e, 0x45, 0x8f, 0x81, 0x33, 0xe3,
	0x18, 0x26, 0x57, 0x74, 0xbb, 0xc4, 0xd3, 0x4c, 0xd7, 0xed, 0x12, 0xfc, 0x6e, 0x7b, 0x16, 0x9d,
	0x03, 0x89, 0x71, 0xc8, 0x25, 0xb6, 0xc1, 0x0b, 0x58, 0x5f, 0x87, 0xdd, 0x8e, 0xa6, 0xb2, 0x92,
	0xa5, 0xd8, 0xe0, 0x94, 0x04, 0xd0, 0xcf, 0x3a, 0x1a, 0x3a, 0x0f, 0xce, 0x4e, 0xb8, 0xd2, 0x19,
	0x2f, 0x50, 0xf3, 0x39, 0xc2, 0x0d, 0xea, 0x14, 0xe0, 0xcf, 0x3b, 0x1a, 0x3a, 0x0b, 0xe2, 0xe3,
	0x94, 0x69, 0x33, 0x42, 0x89, 0xcb, 0xe0, 0x6f, 0x3a, 0x1a, 0x5a, 0x06, 0xc9, 0x89, 0x58, 0x6c,
	0x97, 0x63, 0x23, 0x6f, 0x52, 0x02, 0xdf, 0x53, 0xfb, 0x11, 0x44, 0x96, 0xb0, 0x3e, 0xf5, 0x7e,
	0x47, 0x43, 0xab, 0x60, 0x65, 0xd2, 0x8f, 0x5b, 0xa4, 0xa2, 0x32, 0x3c, 0x5d, 0x2c, 0x49, 0xaf,
	0x59, 0x31, 0x6f, 0xc0, 0xdf, 0x3d, 0x08, 0x6f, 0x10, 0xd7, 0xcc, 0xda, 0x92, 0xff, 0x7d, 0x47,
	0x43, 0xcf, 0x82, 0x4f, 0x1e, 0xcc, 0x53, 0xc2, 0x8a, 0xd4, 0x0e, 0xbb, 0xf8, 0xc3, 0x03, 0xaa,
	0x84, 0xbc, 0xfc, 0xb1, 0xa3, 0xa1, 0x27, 0xc1, 0xa3, 0x07, 0xab, 0x14, 0x0b, 0x62, 0x11, 0x08,
	0xfc, 0x93, 0xba, 0x28, 0x05, 0x4c, 0x99, 0x4d, 0x28, 0xa7, 0x24, 0x8d, 0x19, 0x81, 0x7f, 0xee,
	0x68, 0x28, 0x01, 0x62, 0x13, 0xe6, 0x2c, 0x07, 0xfe, 0xa5, 0xa3, 0xa1, 0x27, 0xc0, 0xf2, 0xf8,
	0x94, 0x8e, 0x6d, 0xa3, 0xc4, 0x0b, 0x8e, 0x63, 0x71, 0xab, 0xa8, 0xaf, 0x97, 0xe0, 0x7e, 0x47,
	0x43, 0x4f, 0x81, 0xc7, 0x0e, 0xe1, 0x06, 0x4b, 0x79, 0x57, 0xbd, 0xd4, 0x86, 0x79, 0xd9, 0x34,
	0x88, 0x6d, 0xc0, 0x7f, 0xa8, 0x5d, 0x52, 0xa2, 0x63, 0xcb, 0xe2, 0x8e, 0x65, 0xf0, 0xa2, 0x4b,
	0xa8, 0x0b, 0xff, 0xa5, 0xae, 0x1b, 0xd6, 0x99, 0x79, 0xd9, 0x64, 0x25, 0x8e, 0x8b, 0x3a, 0x33,
	0x1d, 0x5b, 0xec, 0x79, 0x6e, 0x10, 0xa3, 0xa8, 0x33, 0xf8, 0xef, 0x8e, 0x86, 0x9e, 0x06, 0x4f,
	0x1c, 0xa8, 0x92, 0xc5, 0x8c, 0xbb, 0xc5, 0xb4, 0xab, 0x53, 0x33, 0x4d, 0xe0, 0x7f, 0xd4, 0x7b,
	0xce, 0xb4, 0x1c, 0x5e, 0xb4, 0x2d, 0x47, 0x5f, 0x87, 0xff, 0xed, 0x68, 0xe8, 0x51, 0xb0, 0x34,
	0x4e, 0x94, 0x0c, 0xce, 0xb0, 0xbb, 0xce, 0xd3, 0x84, 0xc1, 0xd7, 0x6f, 0x2a, 0x7b, 0xa4, 0x64,
	0x0c, 0x76, 0x3f, 0xde, 0x80, 0x37, 0x6e, 0x6a, 0xe8, 0x02, 0x38, 0xaf, 0x80, 0x2c, 0x87, 0x31,
	0x42, 0x4b, 0x5c, 0x77, 0x8c, 0x80, 0x7d, 0xe3, 0xa6, 0x86, 0x2e, 0x82, 0x27, 0x15, 0xac, 0xee,
	0xd8, 0x8c, 0x8a, 0xbe, 0xa2, 0xd8, 0x5e, 0xe7, 0x94, 0x6c, 0x60, 0x6a, 0xc0, 0xb6, 0xda, 0xbf,
	0x4d, 0x36, 0x64, 0x19, 0x79, 0xd6, 0xcc, 0x30, 0xf8, 0xcf, 0x7d, 0xe5, 0x7e, 0xda, 0x30, 0x6d,
	0xdb, 0xb4, 0xb3, 0x9c, 0xe5, 0x48, 0x2f, 0x5a, 0xf8, 0xd2, 0xed, 0x45, 0xd5, 0xf1, 0x22, 0x9a,
	0xcc, 0x2d, 0x16, 0x08, 0xe5, 0x2e, 0xc3, 0x94, 0xc1, 0x2f, 0xdd, 0x5e, 0x54, 0xc5, 0x38, 0x86,
	0xc9, 0x80, 0x89, 0xcd, 0xe0, 0xcb, 0x07, 0x5b, 0xcd, 0x39, 0x02, 0xcb, 0xe7, 0x05, 0xf6, 0xca,
	0xc1, 0x56, 0x43, 0xd8, 0xc0, 0xea, 0xab, 0xb7, 0x17, 0xd1, 0x19, 0xf0, 0xc8, 0x04, 0xce, 0xf0,
	0xba, 0x69, 0x67, 0xe1, 0x6b, 0xf7, 0x11, 0x5a, 0x01, 0xa9, 0x03, 0xa6, 0xb9, 0x69, 0x5f, 0x26,
	0x2e, 0x93, 0x7e, 0x6f, 0xdc, 0x47, 0xaa, 0x73, 0x30, 0x63, 0xda, 0xd8, 0xd6, 0x4d, 0x6c, 0xc1,
	0x9f, 0xb4, 0x63, 0xe8, 0x19, 0x70, 0x61, 0xf2, 0xd0, 0xcd, 0x98, 0xdc, 0xa1, 0xa4, 0xb7, 0xff,
	0x75, 0x4a, 0xc4, 0xa4, 0x43, 0x0d, 0x42, 0xe1, 0x07, 0xed, 0x18, 0xfa, 0x14, 0x78, 0xea, 0x70,
	0x0d, 0x4a, 0x0a, 0xb8, 0xc4, 0xf3, 0x8e, 0x4d, 0x4a, 0xf0, 0xc3, 0x76, 0x0c, 0xad, 0x81, 0xa7,
	0x1f, 0x44, 0x61, 0xd0, 0x68, 0x1f, 0xb5, 0x63, 0xaa, 0x06, 0x19, 0xd5, 0xc9, 0x10, 0x32, 0x3c,
	0x37, 0xe0, 0xc7, 0x47, 0x64, 0x92, 0xb1, 0x9c, 0x8d, 0xd1, 0x4c, 0xf6, 0x8f, 0xc8, 0x44, 0x6a,
	0x84, 0x33, 0xb9, 0x7b, 0x44, 0x26, 0x21, 0x85, 0x41, 0x26, 0x7f, 0x3d, 0x22, 0x13, 0xa9, 0x33,
	0x9a, 0xc9, 0xdf, 0xda, 0x31, 0x74, 0x1a, 0x9c, 0x1a, 0x57, 0x49, 0x3b, 0x94, 0x3a, 0x1b, 0xf0,
	0xb5, 0x6e, 0x4c, 0xd5, 0xb8, 0xbd, 0x59, 0x9e, 0x77, 0x28, 0x83, 0xaf, 0x77, 0x63, 0xaa, 0xc6,
	0x09, 0x10, 0x4a, 0x0c, 0x42, 0xf2, 0xf0, 0xc6, 0xa1, 0x76, 0xd2, 0xe2, 0xfe, 0x7b, 0xa3, 0x1b,
	0x53, 0x6d, 0xee, 0x00, 0xc1, 0x86, 0xd1, 0x73, 0xd7, 0xee, 0xc6, 0x54, 0x2d, 0x18, 0x60, 0xba,
	0xe5, 0xb8, 0xa4, 0x67, 0xef, 0xcb, 0xdd, 0x98, 0xea, 0xac, 0x18, 0x01, 0xdd, 0x22, 0x2d, 0x58,
	0x45, 0x17, 0x7e, 0xa5, 0x1b, 0x53, 0xed, 0xf1, 0x80, 0x95, 0xeb, 0x1f, 0x14, 0xe4, 0xab, 0xdd,
	0x98, 0xea, 0xd0, 0x0d, 0x93, 0x32, 0xcc, 0xaf, 0x1d, 0xcd, 0xc9, 0x28, 0xbf, 0x7e, 0x68, 0x3a,
	0x03, 0x6e, 0x0d, 0x7e, 0xe3, 0xd0, 0x74, 0x24, 0x38, 0xa8, 0xd1, 0x37, 0xbb, 0x31, 0xd5, 0x6d,
	0x16, 0xb0, 0xe4, 0x8a, 0x3c, 0xfd, 0xe0, 0xed, 0xc3, 0x43, 0xb4, 0xb0, 0xdd, 0x0b, 0xf1, 0xdb,
	0xef, 0xc6, 0x54, 0x97, 0x41, 0x9f, 0x93, 0x5b, 0x50, 0x1e, 0x28, 0x92, 0x7e, 0xf3, 0x5d, 0xe5,
	0x32, 0xe6, 0x4d, 0x79, 0x42, 0x12, 0x4c, 0xc5, 0x5f, 0x17, 0xbe, 0xd9, 0x39, 0xa9, 0xba, 0x33,
	0x02, 0x2c, 0x5d, 0x2c, 0xc1, 0xef, 0xa9, 0x89, 0x8c, 0x85, 0xb3, 0x9c, 0xc9, 0x4b, 0xfb, 0xa5,
	0x5b, 0x71, 0xd5, 0xce, 0x73, 0x09, 0xcb, 0x13, 0x2c, 0xd6, 0xc1, 0x66, 0x39, 0xf8, 0xc3, 0x5b,
	0x71, 0xd5, 0xc7, 0x60, 0x1f, 0x2a, 0x11, 0x4c, 0xe1, 0x8f, 0x6e, 0xc5, 0x95, 0xe7, 0xea, 0x06,
	0x2e, 0xf4, 0x8a, 0x8a, 0xe9, 0x3a, 0x61, 0xf0, 0x83, 0xbd, 0x84, 0xf2, 0x24, 0x14, 0x18, 0x25,
	0x79, 0xe7, 0x32, 0xe9, 0x93, 0x1f, 0xee, 0x25, 0x54, 0xa5, 0x95, 0x64, 0xde, 0xb4, 0xc5, 0x2d,
	0xe1, 0x64, 0x4c, 0x06, 0x3f, 0xda, 0x4b, 0x4c, 0xe4, 0x28, 0x21, 0x72, 0x45, 0xcf, 0x61, 0x3b,
	0x4b, 0xe0, 0xc7, 0x7b, 0x89, 0x89, 0xf6, 0xec, 0x11, 0x2c, 0xb7, 0x06, 0xf7, 0xf7, 0x12, 0x13,
	0x9f, 0x08, 0x72, 0x36, 0x63, 0x5a, 0xcf, 0xae, 0x61, 0x78, 0x77, 0x2f, 0xa1, 0xaa, 0x90, 0xac,
	0x61, 0xff, 0x16, 0x84, 0xdf, 0xfa, 0x7e, 0x52, 0xb5, 0xbe, 0x6e, 0x5e, 0x7c, 0x46, 0x04, 0x1f,
	0xc2, 0xc3, 0x80, 0x7e, 0xfb, 0xf7, 0xa4, 0xea, 0xab, 0x84, 0x51, 0x6c, 0xbb, 0x19, 0x42, 0xe1,
	0x3b, 0xff, 0x4b, 0xaa, 0x8a, 0xd4, 0x9b, 0x77, 0x68, 0x9e, 0x67, 0xa8, 0x93, 0xe7, 0xfa, 0x9a,
	0x0e, 0xdf, 0x7b, 0x7b, 0x49, 0x55, 0xa4, 0x21, 0xc9, 0x1c, 0xc9, 0xbd, 0xff, 0xf6, 0x92, 0xea,
	0x5a, 0x71, 0x98, 0xce, 0x89, 0x38, 0xf8, 0xe0, 0xcb, 0x77, 0x96, 0x54, 0x17, 0x98, 0x00, 0x9c,
	0x22, 0x83, 0xaf, 0xdc, 0x51, 0xfa, 0x11, 0x1f, 0x26, 0x92, 0x09, 0x42, 0x87, 0xaf, 0xde, 0x59,
	0x52, 0x9d, 0xe9, 0x72, 0xaf, 0x0d, 0x3f, 0x7d, 0xd2, 0x98, 0xe9, 0x39, 0xe1, 0x98, 0x96, 0xe0,
	0x2f, 0xef, 0x5d, 0x52, 0xd5, 0x02, 0x9b, 0xb4, 0xf7, 0xb1, 0xfe, 0xab, 0x7b, 0x97, 0x54, 0xe5,
	0xa7, 0xa4, 0x60, 0x11, 0xdb, 0x74, 0x73, 0xf2, 0xd6, 0xfc, 0xf5, 0xbd, 0x4b, 0x17, 0xde, 0x8a,
	0x02, 0x20, 0x1f, 0xa2, 0x4c, 0x3e, 0xe2, 0x11, 0x38, 0x3e, 0x1c, 0x05, 0x8f, 0xd6, 0x93, 0x00,
	0x9a, 0xb5, 0x4d, 0xf1, 0x5a, 0xf2, 0xfa, 0xaf, 0x42, 0x18, 0x41, 0x49, 0x70, 0x6a, 0x5c, 0x4a,
	0xbd, 0xd6, 0x6e, 0xd5, 0x87, 0x51, 0xa1, 0x61, 0x78, 0x63, 0x1a, 0x53, 0x42, 0x63, 0x5c, 0x1a,
	0x68, 0x4c, 0x23, 0x08, 0xb4, 0x7c, 0xfd, 0x85, 0x21, 0x3d, 0x83, 0x4e, 0x01, 0x14, 0x96, 0x04,
	0xe4, 0x2c, 0x7a, 0x04, 0xc4, 0xf2, 0xbb, 0x55, 0xbf, 0xa2, 0x5f, 0x2d, 0xd7, 0xb6, 0x87, 0x0a,
	0xc7, 0xd0, 0x19, 0x90, 0x50, 0x4c, 0x04, 0x7a, 0x73, 0x28, 0x01, 0x1e, 0x1e, 0xf7, 0x8e, 0xb7,
	0x76, 0x2a, 0x35, 0x38, 0x8f, 0xce, 0x81, 0x25, 0xe5, 0x54, 0xa0, 0x0b, 0x2e, 0xec, 0x00, 0x2d,
	0xfc, 0x1e, 0x16, 0xf9, 0x85, 0xc7, 0x41, 0x9d, 0x34, 0x30, 0xe7, 0x36, 0xea, 0x7e, 0xa6, 0xe9,
	0x79, 0x30, 0x22, 0xde, 0x86, 0x62, 0xe4, 0x34, 0xb7, 0xbc, 0x66, 0xa6, 0x59, 0xff, 0xa2, 0x57,
	0x83, 0x51, 0xf4, 0x30, 0xf8, 0x84, 0x44, 0x2a, 0x35, 0xf1, 0x04, 0x0e, 0xc4, 0x53, 0x68, 0x11,
	0xcc, 0x3b, 0x4c, 0x0f, 0x86, 0xd3, 0xe9, 0x13, 0xcf, 0x2d, 0xae, 0x7e, 0x26, 0xf4, 0x54, 0x7e,
	0x7e, 0x56, 0xfe, 0x43, 0xe9, 0xd3, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x03, 0x3d, 0xd5, 0x34,
	0x61, 0x12, 0x00, 0x00,
}
