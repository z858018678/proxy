// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tradeData.proto

package Trade

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type TradeREQMessage struct {
	Cmd                  EVEN                  `protobuf:"varint,1,opt,name=Cmd,proto3,enum=Trade.EVEN" json:"Cmd,omitempty"`
	Symbol               *Symbol               `protobuf:"bytes,2,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
	DepthData            *DepthList            `protobuf:"bytes,3,opt,name=DepthData,proto3" json:"DepthData,omitempty"`
	TickerData           *TickerData           `protobuf:"bytes,4,opt,name=TickerData,proto3" json:"TickerData,omitempty"`
	FiveDepth            *FiveDepth            `protobuf:"bytes,5,opt,name=FiveDepth,proto3" json:"FiveDepth,omitempty"`
	TradeData            []*TradeBasicInfo     `protobuf:"bytes,6,rep,name=TradeData,proto3" json:"TradeData,omitempty"`
	KlineData            []*KlineBasicInfo     `protobuf:"bytes,7,rep,name=KlineData,proto3" json:"KlineData,omitempty"`
	TradeDataUser        []*TradeBasicInfoUser `protobuf:"bytes,8,rep,name=TradeDataUser,proto3" json:"TradeDataUser,omitempty"`
	OrderDataUser        []*OrderInfoUser      `protobuf:"bytes,9,rep,name=OrderDataUser,proto3" json:"OrderDataUser,omitempty"`
	SecretKey            string                `protobuf:"bytes,10,opt,name=SecretKey,proto3" json:"SecretKey,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *TradeREQMessage) Reset()         { *m = TradeREQMessage{} }
func (m *TradeREQMessage) String() string { return proto.CompactTextString(m) }
func (*TradeREQMessage) ProtoMessage()    {}
func (*TradeREQMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_5354af4f46f3d0c6, []int{0}
}

func (m *TradeREQMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TradeREQMessage.Unmarshal(m, b)
}
func (m *TradeREQMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TradeREQMessage.Marshal(b, m, deterministic)
}
func (m *TradeREQMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradeREQMessage.Merge(m, src)
}
func (m *TradeREQMessage) XXX_Size() int {
	return xxx_messageInfo_TradeREQMessage.Size(m)
}
func (m *TradeREQMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_TradeREQMessage.DiscardUnknown(m)
}

var xxx_messageInfo_TradeREQMessage proto.InternalMessageInfo

func (m *TradeREQMessage) GetCmd() EVEN {
	if m != nil {
		return m.Cmd
	}
	return EVEN_Kong
}

func (m *TradeREQMessage) GetSymbol() *Symbol {
	if m != nil {
		return m.Symbol
	}
	return nil
}

func (m *TradeREQMessage) GetDepthData() *DepthList {
	if m != nil {
		return m.DepthData
	}
	return nil
}

func (m *TradeREQMessage) GetTickerData() *TickerData {
	if m != nil {
		return m.TickerData
	}
	return nil
}

func (m *TradeREQMessage) GetFiveDepth() *FiveDepth {
	if m != nil {
		return m.FiveDepth
	}
	return nil
}

func (m *TradeREQMessage) GetTradeData() []*TradeBasicInfo {
	if m != nil {
		return m.TradeData
	}
	return nil
}

func (m *TradeREQMessage) GetKlineData() []*KlineBasicInfo {
	if m != nil {
		return m.KlineData
	}
	return nil
}

func (m *TradeREQMessage) GetTradeDataUser() []*TradeBasicInfoUser {
	if m != nil {
		return m.TradeDataUser
	}
	return nil
}

func (m *TradeREQMessage) GetOrderDataUser() []*OrderInfoUser {
	if m != nil {
		return m.OrderDataUser
	}
	return nil
}

func (m *TradeREQMessage) GetSecretKey() string {
	if m != nil {
		return m.SecretKey
	}
	return ""
}

//交易对
type Symbol struct {
	Coin                 string   `protobuf:"bytes,1,opt,name=Coin,proto3" json:"Coin,omitempty"`
	Market               string   `protobuf:"bytes,2,opt,name=Market,proto3" json:"Market,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Symbol) Reset()         { *m = Symbol{} }
func (m *Symbol) String() string { return proto.CompactTextString(m) }
func (*Symbol) ProtoMessage()    {}
func (*Symbol) Descriptor() ([]byte, []int) {
	return fileDescriptor_5354af4f46f3d0c6, []int{1}
}

func (m *Symbol) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Symbol.Unmarshal(m, b)
}
func (m *Symbol) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Symbol.Marshal(b, m, deterministic)
}
func (m *Symbol) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Symbol.Merge(m, src)
}
func (m *Symbol) XXX_Size() int {
	return xxx_messageInfo_Symbol.Size(m)
}
func (m *Symbol) XXX_DiscardUnknown() {
	xxx_messageInfo_Symbol.DiscardUnknown(m)
}

var xxx_messageInfo_Symbol proto.InternalMessageInfo

func (m *Symbol) GetCoin() string {
	if m != nil {
		return m.Coin
	}
	return ""
}

func (m *Symbol) GetMarket() string {
	if m != nil {
		return m.Market
	}
	return ""
}

func init() {
	proto.RegisterType((*TradeREQMessage)(nil), "Trade.TradeREQMessage")
	proto.RegisterType((*Symbol)(nil), "Trade.Symbol")
}

func init() { proto.RegisterFile("tradeData.proto", fileDescriptor_5354af4f46f3d0c6) }

var fileDescriptor_5354af4f46f3d0c6 = []byte{
	// 333 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x51, 0x4b, 0xf3, 0x30,
	0x14, 0x86, 0xe9, 0xd7, 0xad, 0x9f, 0x39, 0x73, 0x4e, 0x83, 0x4a, 0x14, 0x85, 0x32, 0x10, 0x7a,
	0x55, 0x70, 0xf3, 0xca, 0x1b, 0xc1, 0x6d, 0x82, 0xcc, 0x29, 0x66, 0xd3, 0xfb, 0xae, 0x8b, 0x5a,
	0xb6, 0x36, 0x23, 0x0d, 0xc2, 0x7e, 0xb5, 0x7f, 0x41, 0x72, 0xda, 0x35, 0x2b, 0x78, 0x53, 0xda,
	0xf7, 0x3c, 0xcf, 0x39, 0x6d, 0x4f, 0xa0, 0xa3, 0x55, 0xb4, 0x10, 0xc3, 0x48, 0x47, 0xe1, 0x5a,
	0x49, 0x2d, 0x69, 0x73, 0x66, 0x82, 0xf3, 0xfd, 0x58, 0xa6, 0xa9, 0xcc, 0x8a, 0xb0, 0xfb, 0xe3,
	0x42, 0x07, 0x73, 0x3e, 0x7a, 0x9d, 0x88, 0x3c, 0x8f, 0x3e, 0x05, 0xbd, 0x04, 0x77, 0x90, 0x2e,
	0x98, 0xe3, 0x3b, 0xc1, 0x41, 0xaf, 0x15, 0x62, 0x39, 0x1c, 0xbd, 0x8f, 0x9e, 0xb9, 0xc9, 0xe9,
	0x15, 0x78, 0xd3, 0x4d, 0x3a, 0x97, 0x2b, 0xf6, 0xcf, 0x77, 0x82, 0x56, 0xaf, 0x5d, 0x12, 0x45,
	0xc8, 0xcb, 0x22, 0x0d, 0x81, 0x0c, 0xc5, 0x5a, 0x7f, 0x99, 0x37, 0x60, 0x2e, 0x92, 0x87, 0x25,
	0x89, 0xf9, 0x53, 0x92, 0x6b, 0x6e, 0x11, 0x7a, 0x0d, 0x30, 0x4b, 0xe2, 0xa5, 0x50, 0x28, 0x34,
	0x50, 0x38, 0x2a, 0x05, 0x5b, 0xe0, 0x3b, 0x90, 0x19, 0xf1, 0x90, 0x7c, 0x0b, 0xec, 0xc1, 0x9a,
	0xb5, 0x11, 0x55, 0xce, 0x2d, 0x42, 0xfb, 0x40, 0x66, 0xdb, 0x9f, 0xc2, 0x3c, 0xdf, 0x0d, 0x5a,
	0xbd, 0x93, 0xed, 0x04, 0x73, 0xbd, 0x8f, 0xf2, 0x24, 0x7e, 0xcc, 0x3e, 0x24, 0xb7, 0x9c, 0x91,
	0xc6, 0xab, 0x24, 0x2b, 0xa4, 0xff, 0x35, 0x09, 0xf3, 0x1d, 0xa9, 0xe2, 0xe8, 0x1d, 0xb4, 0xab,
	0x0e, 0x6f, 0xb9, 0x50, 0x6c, 0x0f, 0xc5, 0xb3, 0x3f, 0xa7, 0x19, 0x80, 0xd7, 0x79, 0x7a, 0x0b,
	0xed, 0x17, 0xb5, 0x28, 0xbe, 0x13, 0x1b, 0x10, 0x6c, 0x70, 0x5c, 0x36, 0xc0, 0x9a, 0x75, 0x6b,
	0x28, 0xbd, 0x00, 0x32, 0x15, 0xb1, 0x12, 0x7a, 0x2c, 0x36, 0x0c, 0x7c, 0x27, 0x20, 0xdc, 0x06,
	0xdd, 0x9b, 0xed, 0xfa, 0x28, 0x85, 0xc6, 0x40, 0x26, 0x19, 0x2e, 0x9a, 0x70, 0xbc, 0xa7, 0xa7,
	0xe0, 0x4d, 0x22, 0xb5, 0x14, 0x1a, 0x97, 0x4b, 0x78, 0xf9, 0x34, 0xf7, 0xf0, 0xb8, 0xf4, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x01, 0x52, 0xfc, 0xbc, 0x56, 0x02, 0x00, 0x00,
}
